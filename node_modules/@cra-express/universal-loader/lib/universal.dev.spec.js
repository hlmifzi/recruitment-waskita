"use strict";

var _react = _interopRequireDefault(require("react"));

var _universal = _interopRequireDefault(require("./universal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// import streamRenderer from './renderer/stream-renderer'
process.env.NODE_ENV = 'development';
jest.mock('http');

var http = require('http');

test('have correct env', function () {
  expect(process.env.NODE_ENV).toBe('development');
});
test('created correctly', function () {
  var config = {
    clientBuildPath: 'test',
    universalRender: function universalRender() {}
  };
  var middleware = (0, _universal["default"])(config);
  expect(middleware).toBeDefined();
});
test('should request html data from CRA with no error', function () {
  var config = {
    clientBuildPath: 'test',
    universalRender: function universalRender() {}
  };
  var middleware = (0, _universal["default"])(config);
  var mockResult = {
    setEncoding: jest.fn(),
    on: jest.fn()
  };
  var spy = jest.spyOn(http, 'get').mockImplementation(function (url, callback) {
    callback(mockResult);
    return {
      on: jest.fn()
    };
  });
  var spyLog = jest.spyOn(console, 'error');
  middleware();
  expect(http.get).toHaveBeenCalled();
  expect(mockResult.setEncoding).toHaveBeenCalled();
  expect(mockResult.on).toHaveBeenCalledTimes(2);
  expect(console.error).toHaveBeenCalledTimes(0);
  spyLog.mockReset();
  spy.mockReset();
});
test('should handle http get error', function () {
  var config = {
    clientBuildPath: 'test',
    universalRender: function universalRender() {}
  };
  var middleware = (0, _universal["default"])(config);
  var mockResult = {
    setEncoding: jest.fn(),
    on: jest.fn()
  };
  var spy = jest.spyOn(http, 'get').mockImplementation(function (url, callback) {
    callback(mockResult);
    return {
      on: jest.fn(function (event, callback) {
        return callback({
          message: 'Error test'
        });
      })
    };
  });
  var spyLog = jest.spyOn(console, 'error');
  var mockStatus = {
    end: jest.fn()
  };
  var mockResponse = {
    write: jest.fn(),
    status: jest.fn(function () {
      return mockStatus;
    })
  };
  middleware({}, mockResponse);
  expect(http.get).toHaveBeenCalled();
  expect(console.error).toHaveBeenCalled();
  expect(mockResponse.status).toHaveBeenCalledWith(404);
  expect(mockStatus.end).toHaveBeenCalled();
  spyLog.mockReset();
  spy.mockReset();
});
test('send response successfully', function () {
  var config = {
    clientBuildPath: 'test',
    handleRender: jest.fn(),
    universalRender: function universalRender() {
      return _react["default"].createElement("div", null, "a");
    }
  };
  var middleware = (0, _universal["default"])(config);
  var mockResult = {
    setEncoding: jest.fn(),
    on: jest.fn(function (event, cb) {
      var arg = [];

      if (event === 'data') {
        arg.push('<html><div id="root"></div></html>');
      }

      cb.apply(void 0, arg);
    })
  };
  var spy = jest.spyOn(http, 'get').mockImplementation(function (url, callback) {
    callback(mockResult);
    return {
      on: jest.fn()
    };
  });
  var mockResponse = {
    write: jest.fn(),
    end: jest.fn()
  };
  middleware({}, mockResponse);
  expect(console.error).toHaveBeenCalledTimes(0);
  expect(config.handleRender).toHaveBeenCalledTimes(1);
  spy.mockReset();
});
test('send response successfully - with default renderer', function () {
  var config = {
    clientBuildPath: 'test',
    universalRender: function universalRender() {
      return _react["default"].createElement("div", null, "a");
    }
  };
  var middleware = (0, _universal["default"])(config);
  var mockResult = {
    setEncoding: jest.fn(),
    on: jest.fn(function (event, cb) {
      var arg = [];

      if (event === 'data') {
        arg.push('<html><div id="root"></div></html>');
      }

      cb.apply(void 0, arg);
    })
  };
  var spy = jest.spyOn(http, 'get').mockImplementation(function (url, callback) {
    callback(mockResult);
    return {
      on: jest.fn()
    };
  });
  var mockResponse = {
    write: jest.fn(),
    end: jest.fn(),
    send: jest.fn()
  };
  middleware({}, mockResponse);
  expect(console.error).toHaveBeenCalledTimes(0);
  expect(mockResponse.send).toHaveBeenCalledTimes(1);
  spy.mockReset();
});