"use strict";

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var mockStream = {
  pipe: jest.fn(),
  on: jest.fn(function (type, cb) {
    return cb();
  })
};

var mockRenderToNodeStream = function mockRenderToNodeStream() {
  return mockStream;
};

jest.setMock('react-dom/server', {
  renderToNodeStream: mockRenderToNodeStream
});

var streamRenderer = require('./stream-renderer')["default"];

test('should render without options correctly', function () {
  var htmlData = "\n  <html>\n    <body>\n      <div id=\"root\"></div>\n    </body>\n  </html>\n  ";

  var element = _react["default"].createElement("div", null, "Hello");

  var req = {};
  var res = {
    write: jest.fn(),
    send: jest.fn(),
    end: jest.fn()
  };
  streamRenderer(req, res, element, htmlData, {});
  expect(res.write).toHaveBeenCalledTimes(2);
});
test('should render with onEndReplace option', function () {
  var htmlData = "\n  <html>\n    <body>\n      <div id=\"root\"></div>{{ssr}}\n    </body>\n  </html>\n";

  var element = _react["default"].createElement("div", null, "Hello");

  var req = {};
  var res = {
    write: jest.fn(),
    send: jest.fn(),
    end: jest.fn()
  };
  streamRenderer(req, res, element, htmlData, {
    onEndReplace: function onEndReplace(data) {
      return data.replace('{{ssr}}', '<div>ssr</div>');
    }
  });
  expect(res.write).toHaveBeenCalledTimes(2);
  expect(res.write).toHaveBeenLastCalledWith("</div><div>ssr</div>\n    </body>\n  </html>\n");
});